from datetime import datetime, timedelta
from random import randint
from time import sleep
from typing import Literal
from urllib.parse import unquote

from colorama import Fore
from core.tread_lock import Console_Lock
from requests import get, post

from .settings import COINS, HEADERS


class BlumAccount:
    def __init__(self, Name: str, URL: str, Proxy: dict) -> None:
        self.Name = Name
        self.URL = self.URL_Clean(URL)
        self.Proxy = Proxy
        self.Token = self.Authentication()

    def URL_Clean(self, URL: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""

        try:
            return unquote(
                URL.split('#tgWebAppData=')[1].split('&tgWebAppVersion')[0]
            )
        except:
            return ''

    def Current_Time(self) -> str:
        """–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""

        return Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'

    def Logging(
        self,
        Type: Literal['Success', 'Warning', 'Error'],
        Name: str,
        Smile: str,
        Text: str,
    ) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""

        with Console_Lock:
            COLOR = (
                Fore.GREEN
                if Type == 'Success'
                else Fore.YELLOW
                if Type == 'Warning'
                else Fore.RED
            )   # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            DIVIDER = Fore.BLACK + ' | '   # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            Time = self.Current_Time()     # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            Name = Fore.MAGENTA + Name     # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
            Smile = COLOR + str(Smile)     # –°–º–∞–π–ª–∏–∫
            Text = COLOR + Text            # –¢–µ–∫—Å—Ç –ª–æ–≥–∞

            print(Time + DIVIDER + Smile + DIVIDER + Text + DIVIDER + Name)

    def Authentication(self) -> str:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""

        URL = 'https://gateway.blum.codes/v1/auth/provider/PROVIDER_TELEGRAM_MINI_APP'
        Json = {'query': self.URL}

        try:
            Token = post(
                URL, headers=HEADERS, json=Json, proxies=self.Proxy
            ).json()['token']['access']
            self.Logging('Success', self.Name, 'üü¢', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
            return Token
        except Exception:
            self.Logging('Error', self.Name, 'üî¥', '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!')
            return ''

    def ReAuthentication(self) -> None:
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""

        self.Token = self.Authentication()

    def Get_Info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –∏ –Ω–∞–ª–∏—á–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä"""

        URL = 'https://game-domain.blum.codes/api/v1/user/balance'
        Headers_bear = HEADERS.copy()
        Headers_bear['authorization'] = f'Bearer {self.Token}'

        try:
            res = get(URL, headers=Headers_bear, proxies=self.Proxy).json()

            Balance = res['availableBalance']   # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            Plays = res['playPasses']   # –î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª-–≤–æ –∏–≥—Ä

            return {'Balance': f'{float(Balance):,.0f}', 'Plays': Plays}
        except Exception:
            return None

    def Get_Time_Now(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""

        URL = 'https://game-domain.blum.codes/api/v1/time/now'
        Headers_bear = HEADERS.copy()
        Headers_bear['authorization'] = f'Bearer {self.Token}'

        try:
            return get(URL, headers=Headers_bear, proxies=self.Proxy).json()
        except Exception:
            return None

    def Daily_Reward(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã"""

        URL = 'https://game-domain.blum.codes/api/v1/daily-reward?offset=-600'
        Headers_bear = HEADERS.copy()
        Headers_bear['authorization'] = f'Bearer {self.Token}'

        try:
            res = post(URL, headers=Headers_bear, proxies=self.Proxy)

            if res.text == 'OK':
                return True
            else:
                return False
        except Exception:
            return False

    def Claim(self) -> None:
        """–°–±–æ—Ä –º–æ–Ω–µ—Ç"""

        URL = 'https://game-domain.blum.codes/api/v1/farming/claim'
        Headers_bear = HEADERS.copy()
        Headers_bear['authorization'] = f'Bearer {self.Token}'

        try:
            post(URL, headers=Headers_bear, proxies=self.Proxy).json()[
                'availableBalance'
            ]
            self.Logging('Success', self.Name, 'üü¢', '–ú–æ–Ω–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã!')
        except Exception:
            self.Logging('Error', self.Name, 'üî¥', '–ú–æ–Ω–µ—Ç—ã –Ω–µ —Å–æ–±—Ä–∞–Ω—ã!')

    def Start_Farm(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ñ–∞—Ä–º–∞ –º–æ–Ω–µ—Ç"""

        URL = 'https://game-domain.blum.codes/api/v1/farming/start'
        Headers_bear = HEADERS.copy()
        Headers_bear['authorization'] = f'Bearer {self.Token}'

        try:
            post(URL, headers=Headers_bear, proxies=self.Proxy).json()[
                'startTime'
            ]
            self.Logging('Success', self.Name, 'üü¢', '–§–∞—Ä–º –º–æ–Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω!')
        except Exception:
            self.Logging('Error', self.Name, 'üî¥', '–§–∞—Ä–º –º–æ–Ω–µ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω!')

    def Referal_Claim(self) -> bool:
        """–°–±–æ—Ä –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""

        URL = 'https://gateway.blum.codes/v1/friends/claim'
        Headers_bear = HEADERS.copy()
        Headers_bear['authorization'] = f'Bearer {self.Token}'

        try:
            post(URL, headers=Headers_bear, proxies=self.Proxy).json()[
                'claimBalance'
            ]
            return True
        except Exception:
            return False

    def Play(self) -> None:
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã"""

        URL_1 = 'https://game-domain.blum.codes/api/v1/game/play'
        URL_2 = 'https://game-domain.blum.codes/api/v1/game/claim'
        Headers_1_bear = HEADERS.copy()
        Headers_1_bear['authorization'] = f'Bearer {self.Token}'

        Headers_2_bear = HEADERS.copy()
        Headers_2_bear['authorization'] = f'Bearer {self.Token}'

        try:
            GID = post(
                URL_1, headers=Headers_1_bear, proxies=self.Proxy
            ).json()[
                'gameId'
            ]   # –ó–∞–ø—É—Å–∫ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ ID –∏–≥—Ä—ã
            _COINS = randint(
                COINS[0], COINS[1]
            )   # –ñ–µ–ª–∞–µ–º–æ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç
            sleep(30)   # –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥, –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã

            post(
                URL_2,
                headers=Headers_2_bear,
                json={'gameId': str(GID), 'points': _COINS},
                proxies=self.Proxy,
            )
            self.Logging(
                'Success', self.Name, 'üü¢', f'–ò–≥—Ä–∞ —Å—ã–≥—Ä–∞–Ω–∞! +{_COINS}!'
            )
        except Exception:
            self.Logging('Error', self.Name, 'üî¥', '–ò–≥—Ä–∞ –Ω–µ —Å—ã–≥—Ä–∞–Ω–∞!')

    def Get_Tasks(self) -> list:
        """–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π"""

        URL = 'https://game-domain.blum.codes/api/v1/tasks'
        Headers_bear = HEADERS.copy()
        Headers_bear['authorization'] = f'Bearer {self.Token}'

        try:
            return get(URL, headers=Headers_bear, proxies=self.Proxy).json()
        except Exception:
            return []

    def Start_Tasks(self, ID: str) -> bool:
        """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è"""

        URL = f'https://game-domain.blum.codes/api/v1/tasks/{ID}/start'
        Headers_bear = HEADERS.copy()
        Headers_bear['authorization'] = f'Bearer {self.Token}'

        try:
            return (
                True
                if post(URL, headers=Headers_bear, proxies=self.Proxy).json()[
                    'STARTED'
                ]
                else False
            )
        except Exception:
            return False

    def Claim_Tasks(self, ID: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""

        URL = f'https://game-domain.blum.codes/api/v1/tasks/{ID}/claim'
        Headers_bear = HEADERS.copy()
        Headers_bear['authorization'] = f'Bearer {self.Token}'

        try:
            res = post(URL, headers=Headers_bear, proxies=self.Proxy).json()

            Status = res['status']   # –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
            Reward = res['reward']   # –ù–∞–≥—Ä–∞–¥–∞

            if Status == 'FINISHED':
                return {'Status': True, 'Reward': Reward}
            else:
                return {'Status': False}
        except Exception:
            return {'Status': False}

    def Run(self) -> None:
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞"""

        while True:
            try:
                if self.Token:   # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
                    self.Logging(
                        'Success',
                        self.Name,
                        'üí∞',
                        f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {self.Get_Info()["Balance"]}',
                    )

                    if self.Daily_Reward():   # –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
                        self.Logging(
                            'Success',
                            self.Name,
                            'üü¢',
                            '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!',
                        )
                        sleep(randint(3, 6))   # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                    if self.Get_Time_Now():
                        self.Logging(
                            'Success', self.Name, 'üü¢', '–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–æ!'
                        )

                    self.Claim()   # –°–±–æ—Ä –º–æ–Ω–µ—Ç
                    sleep(randint(3, 6))   # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                    self.Start_Farm()   # –ó–∞–ø—É—Å–∫ —Ñ–∞—Ä–º–∞ –º–æ–Ω–µ—Ç
                    sleep(randint(3, 6))   # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                    if self.Referal_Claim():   # –°–±–æ—Ä –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                        self.Logging(
                            'Success',
                            self.Name,
                            'üü¢',
                            '–ú–æ–Ω–µ—Ç—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–æ–±—Ä–∞–Ω—ã!',
                        )
                        sleep(randint(3, 6))   # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –∏ –∑–∞–ø—É—Å–∫ –∏—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                    Get_plays = self.Get_Info()['Plays']
                    if Get_plays > 0:
                        self.Logging(
                            'Success',
                            self.Name,
                            'üéÆ',
                            f'–ò–≥—Ä –¥–æ—Å—Ç—É–ø–Ω–æ: {Get_plays}!',
                        )
                        for _ in range(Get_plays):
                            self.Play()
                            sleep(randint(3, 6))

                        self.Logging(
                            'Success',
                            self.Name,
                            'üí∞',
                            f'–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∏–≥—Ä: {self.Get_Info()["Balance"]}',
                        )

                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
                    Tasks = self.Get_Tasks()   # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
                    for Section in Tasks:
                        for Task in Section['tasks']:
                            if Task['status'] == 'NOT_STARTED' and Task[
                                'title'
                            ] not in [
                                'Invite',
                                'Farm',
                            ]:   # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–æ
                                if self.Start_Tasks(Task['id']):
                                    sleep(
                                        randint(3, 6)
                                    )   # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                                    Claim_Tasks = self.Claim_Tasks(Task['id'])
                                    if Claim_Tasks['Status']:
                                        self.Logging(
                                            'Success',
                                            self.Name,
                                            '‚ö°Ô∏è',
                                            f'–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +{Claim_Tasks["Reward"]}',
                                        )
                                        sleep(
                                            randint(3, 6)
                                        )   # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                            elif (
                                Task['status'] == 'READY_FOR_CLAIM'
                            ):   # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –Ω–∞—á–∞—Ç–æ
                                Claim_Tasks = self.Claim_Tasks(Task['id'])

                                if Claim_Tasks['Status']:
                                    self.Logging(
                                        'Success',
                                        self.Name,
                                        '‚ö°Ô∏è',
                                        f'–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +{Claim_Tasks["Reward"]}',
                                    )
                                    sleep(
                                        randint(3, 6)
                                    )   # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                    Waiting = randint(
                        3_500, 3_600
                    )   # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                    Waiting_STR = (
                        datetime.now() + timedelta(seconds=Waiting)
                    ).strftime(
                        '%Y-%m-%d %H:%M:%S'
                    )   # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ

                    self.Logging(
                        'Success',
                        self.Name,
                        'üí∞',
                        f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {self.Get_Info()["Balance"]}',
                    )
                    self.Logging(
                        'Warning',
                        self.Name,
                        '‚è≥',
                        f'–°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä: {Waiting_STR}!',
                    )

                    sleep(Waiting)   # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 8 –¥–æ 9 —á–∞—Å–æ–≤
                    self.ReAuthentication()   # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞

                else:   # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É—Å–ø–µ—à–Ω–∞
                    sleep(randint(33, 66))   # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 33 –¥–æ 66 —Å–µ–∫—É–Ω–¥
                    self.ReAuthentication()   # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
            except Exception:
                pass
